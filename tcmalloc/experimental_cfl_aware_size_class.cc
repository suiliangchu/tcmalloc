// Copyright 2019 The TCMalloc Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "tcmalloc/common.h"

GOOGLE_MALLOC_SECTION_BEGIN
namespace tcmalloc {

namespace tcmalloc_internal {

// <fixed> is fixed per-size-class overhead due to end-of-span fragmentation
// and other factors. For instance, if we have a 96 byte size class, and use a
// single 8KiB page, then we will hold 85 objects per span, and have 32 bytes
// left over. There is also a fixed component of 48 bytes of TCMalloc metadata
// per span. Together, the fixed overhead would be wasted/allocated =
// (32 + 48) / (8192 - 32) ~= 0.98%.
// There is also a dynamic component to overhead based on mismatches between the
// number of bytes requested and the number of bytes provided by the size class.
// Together they sum to the total overhead; for instance if you asked for a
// 50-byte allocation that rounds up to a 64-byte size class, the dynamic
// overhead would be 28%, and if <fixed> were 22% it would mean (on average)
// 25 bytes of overhead for allocations of that size.

// clang-format off
#if defined(__cpp_aligned_new) && __STDCPP_DEFAULT_NEW_ALIGNMENT__ <= 8
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 82;
static_assert(kCount <= kNumClasses);
const int SizeMap::kExperimentalCFLAwareSizeClassesCount = kCount;
const SizeClassInfo SizeMap::kExperimentalCFLAwareSizeClasses[SizeMap::kExperimentalCFLAwareSizeClassesCount] = {
    // <bytes>, <pages>, <batch size>    <fixed>
    {        0,       0,           0},  // +Inf%
    {        8,       1,          32},  // 0.59%
    {       16,       1,          32},  // 0.59%
    {       32,       1,          32},  // 0.59%
    {       64,       1,          32},  // 0.59%
    {       72,       1,          32},  // 1.27%
    {       80,       1,          32},  // 0.98%
    {       88,       1,          32},  // 0.68%
    {       96,       1,          32},  // 0.98%
    {      104,       1,          32},  // 1.56%
    {      112,       1,          32},  // 0.78%
    {      120,       1,          32},  // 0.98%
    {      128,       1,          32},  // 0.59%
    {      136,       1,          32},  // 0.98%
    {      144,       1,          32},  // 2.15%
    {      152,       1,          32},  // 2.25%
    {      160,       1,          32},  // 0.98%
    {      176,       1,          32},  // 1.76%
    {      184,       1,          32},  // 1.76%
    {      192,       1,          32},  // 2.15%
    {      208,       1,          32},  // 1.56%
    {      224,       1,          32},  // 2.15%
    {      240,       1,          32},  // 0.98%
    {      256,       1,          32},  // 0.59%
    {      272,       1,          32},  // 0.98%
    {      296,       1,          32},  // 3.03%
    {      312,       1,          32},  // 1.56%
    {      320,       1,          32},  // 2.93%
    {      336,       1,          32},  // 2.15%
    {      352,       1,          32},  // 1.76%
    {      384,       1,          32},  // 2.15%
    {      408,       1,          32},  // 0.98%
    {      448,       1,          32},  // 2.15%
    {      480,       1,          32},  // 0.98%
    {      512,       1,          32},  // 0.59%
    {      576,       1,          32},  // 2.15%
    {      640,       1,          32},  // 6.84%
    {      704,       1,          32},  // 6.05%
    {      768,       1,          32},  // 6.84%
    {      896,       1,          32},  // 2.15%
    {     1024,       1,          32},  // 0.59%
    {     1152,       2,          32},  // 1.86%
    {     1280,       2,          32},  // 6.54%
    {     1408,       2,          32},  // 5.76%
    {     1536,       2,          32},  // 6.54%
    {     1792,       2,          32},  // 1.86%
    {     1920,       2,          32},  // 6.54%
    {     2048,       2,          32},  // 0.29%
    {     2176,       2,          30},  // 7.32%
    {     2304,       2,          28},  // 1.86%
    {     2688,       2,          24},  // 1.86%
    {     2944,       2,          22},  // 10.45%
    {     3200,       2,          20},  // 2.64%
    {     4096,       1,          16},  // 0.59%
    {     4480,       2,          14},  // 18.26%
    {     5376,       2,          12},  // 1.86%
    {     6144,       3,          10},  // 0.20%
    {     8192,       1,           8},  // 0.59%
    {     9344,       3,           7},  // 24.15%
    {    10880,       4,           6},  // 0.54%
    {    12288,       3,           5},  // 0.20%
    {    16384,       2,           4},  // 0.29%
    {    19072,       3,           3},  // 22.59%
    {    24576,       3,           2},  // 0.20%
    {    28672,       4,           2},  // 12.65%
    {    32768,       4,           2},  // 0.15%
    {    40960,       5,           2},  // 0.12%
    {    49152,       6,           2},  // 0.10%
    {    57344,       7,           2},  // 0.08%
    {    65536,       8,           2},  // 0.07%
    {    73728,       9,           2},  // 0.07%
    {    81920,      10,           2},  // 0.06%
    {    98304,      12,           2},  // 0.05%
    {   106496,      13,           2},  // 0.05%
    {   114688,      14,           2},  // 0.04%
    {   131072,      16,           2},  // 0.04%
    {   139264,      17,           2},  // 0.03%
    {   155648,      19,           2},  // 0.03%
    {   172032,      21,           2},  // 0.03%
    {   204800,      25,           2},  // 0.02%
    {   237568,      29,           2},  // 0.02%
    {   262144,      32,           2},  // 0.02%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 74;
static_assert(kCount <= kNumClasses);
const int SizeMap::kExperimentalCFLAwareSizeClassesCount = kCount;
const SizeClassInfo SizeMap::kExperimentalCFLAwareSizeClasses[SizeMap::kExperimentalCFLAwareSizeClassesCount] = {
    // <bytes>, <pages>, <batch size>    <fixed>
    {        0,       0,           0},  // +Inf%
    {        8,       1,          32},  // 0.15%
    {       16,       1,          32},  // 0.15%
    {       32,       1,          32},  // 0.15%
    {       64,       1,          32},  // 0.15%
    {       72,       1,          32},  // 0.17%
    {       80,       1,          32},  // 0.29%
    {       88,       1,          32},  // 0.24%
    {       96,       1,          32},  // 0.24%
    {      104,       1,          32},  // 0.17%
    {      112,       1,          32},  // 0.34%
    {      128,       1,          32},  // 0.15%
    {      136,       1,          32},  // 0.54%
    {      144,       1,          32},  // 0.39%
    {      160,       1,          32},  // 0.54%
    {      176,       1,          32},  // 0.24%
    {      192,       1,          32},  // 0.54%
    {      208,       1,          32},  // 0.49%
    {      224,       1,          32},  // 0.34%
    {      240,       1,          32},  // 0.54%
    {      256,       1,          32},  // 0.15%
    {      272,       1,          32},  // 0.54%
    {      288,       1,          32},  // 0.83%
    {      304,       1,          32},  // 0.88%
    {      320,       1,          32},  // 0.54%
    {      352,       1,          32},  // 0.24%
    {      384,       1,          32},  // 0.54%
    {      416,       1,          32},  // 1.12%
    {      448,       1,          32},  // 0.34%
    {      488,       1,          32},  // 0.37%
    {      512,       1,          32},  // 0.15%
    {      576,       1,          32},  // 1.71%
    {      640,       1,          32},  // 0.54%
    {      704,       1,          32},  // 1.32%
    {      768,       1,          32},  // 1.71%
    {      832,       1,          32},  // 1.12%
    {      896,       1,          32},  // 1.71%
    {     1024,       1,          32},  // 0.15%
    {     1152,       1,          32},  // 1.71%
    {     1280,       1,          32},  // 2.49%
    {     1408,       1,          32},  // 1.32%
    {     1536,       1,          32},  // 1.71%
    {     1664,       1,          32},  // 3.66%
    {     1920,       1,          32},  // 0.54%
    {     2048,       1,          32},  // 0.15%
    {     2176,       1,          30},  // 0.54%
    {     2304,       1,          28},  // 1.71%
    {     2432,       1,          26},  // 3.66%
    {     2688,       1,          24},  // 1.71%
    {     2944,       1,          22},  // 1.32%
    {     3200,       1,          20},  // 2.49%
    {     3584,       1,          18},  // 1.71%
    {     4096,       1,          16},  // 0.15%
    {     4608,       1,          14},  // 1.71%
    {     5376,       1,          12},  // 1.71%
    {     6528,       1,          10},  // 0.54%
    {     8192,       1,           8},  // 0.15%
    {     9344,       2,           7},  // 0.27%
    {    10880,       1,           6},  // 0.54%
    {    13056,       2,           5},  // 0.46%
    {    16384,       1,           4},  // 0.15%
    {    21760,       2,           3},  // 0.46%
    {    24576,       1,           2},  // 25.15%
    {    32768,       1,           2},  // 0.15%
    {    43648,       4,           2},  // 0.13%
    {    49152,       3,           2},  // 0.05%
    {    65536,       2,           2},  // 0.07%
    {    76416,       3,           2},  // 22.31%
    {    98304,       3,           2},  // 0.05%
    {   131072,       4,           2},  // 0.04%
    {   163840,       5,           2},  // 0.03%
    {   196608,       6,           2},  // 0.02%
    {   229376,       7,           2},  // 0.02%
    {   262144,       8,           2},  // 0.02%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 85;
static_assert(kCount <= kNumClasses);
const int SizeMap::kExperimentalCFLAwareSizeClassesCount = kCount;
const SizeClassInfo SizeMap::kExperimentalCFLAwareSizeClasses[SizeMap::kExperimentalCFLAwareSizeClassesCount] = {
    // <bytes>, <pages>, <batch size>    <fixed>
    {        0,       0,           0},  // +Inf%
    {        8,       1,          32},  // 0.02%
    {       16,       1,          32},  // 0.02%
    {       32,       1,          32},  // 0.02%
    {       64,       1,          32},  // 0.02%
    {       72,       1,          32},  // 0.04%
    {       80,       1,          32},  // 0.04%
    {       88,       1,          32},  // 0.05%
    {       96,       1,          32},  // 0.04%
    {      104,       1,          32},  // 0.04%
    {      112,       1,          32},  // 0.04%
    {      128,       1,          32},  // 0.02%
    {      144,       1,          32},  // 0.04%
    {      160,       1,          32},  // 0.04%
    {      176,       1,          32},  // 0.05%
    {      192,       1,          32},  // 0.04%
    {      208,       1,          32},  // 0.04%
    {      224,       1,          32},  // 0.04%
    {      256,       1,          32},  // 0.02%
    {      296,       1,          32},  // 0.09%
    {      320,       1,          32},  // 0.04%
    {      344,       1,          32},  // 0.02%
    {      368,       1,          32},  // 0.07%
    {      416,       1,          32},  // 0.04%
    {      456,       1,          32},  // 0.17%
    {      512,       1,          32},  // 0.02%
    {      576,       1,          32},  // 0.04%
    {      640,       1,          32},  // 0.16%
    {      704,       1,          32},  // 0.12%
    {      768,       1,          32},  // 0.12%
    {      832,       1,          32},  // 0.04%
    {      896,       1,          32},  // 0.21%
    {     1024,       1,          32},  // 0.02%
    {     1152,       1,          32},  // 0.26%
    {     1280,       1,          32},  // 0.41%
    {     1408,       1,          32},  // 0.12%
    {     1536,       1,          32},  // 0.41%
    {     1664,       1,          32},  // 0.36%
    {     1792,       1,          32},  // 0.21%
    {     1920,       1,          32},  // 0.41%
    {     2048,       1,          32},  // 0.02%
    {     2176,       1,          30},  // 0.41%
    {     2304,       1,          28},  // 0.70%
    {     2560,       1,          25},  // 0.41%
    {     2816,       1,          23},  // 0.12%
    {     3072,       1,          21},  // 0.41%
    {     3328,       1,          19},  // 0.99%
    {     3584,       1,          18},  // 0.21%
    {     3840,       1,          17},  // 0.41%
    {     4096,       1,          16},  // 0.02%
    {     4352,       1,          15},  // 0.41%
    {     4736,       1,          13},  // 0.65%
    {     5120,       1,          12},  // 0.41%
    {     5504,       1,          11},  // 1.34%
    {     5888,       1,          11},  // 1.19%
    {     6528,       1,          10},  // 0.41%
    {     7168,       1,           9},  // 1.58%
    {     8192,       1,           8},  // 0.02%
    {     8704,       1,           7},  // 0.41%
    {     9344,       1,           7},  // 0.21%
    {     9984,       1,           6},  // 0.99%
    {    10880,       1,           6},  // 0.41%
    {    11904,       1,           5},  // 0.12%
    {    13056,       1,           5},  // 0.41%
    {    14464,       1,           4},  // 0.70%
    {    16384,       1,           4},  // 0.02%
    {    17408,       1,           3},  // 0.41%
    {    18688,       1,           3},  // 0.21%
    {    21760,       1,           3},  // 0.41%
    {    26112,       1,           2},  // 0.41%
    {    29056,       1,           2},  // 0.26%
    {    32768,       1,           2},  // 0.02%
    {    37376,       1,           2},  // 0.21%
    {    43648,       1,           2},  // 0.12%
    {    52352,       1,           2},  // 0.16%
    {    65536,       1,           2},  // 0.02%
    {    74880,       2,           2},  // 0.03%
    {    87296,       1,           2},  // 0.12%
    {   104832,       2,           2},  // 0.03%
    {   116480,       1,           2},  // 11.15%
    {   131072,       1,           2},  // 0.02%
    {   149760,       2,           2},  // 14.32%
    {   174720,       2,           2},  // 0.03%
    {   196608,       1,           2},  // 25.02%
    {   262144,       1,           2},  // 0.02%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static const int kCount = 42;
static_assert(kCount <= kNumClasses);
const int SizeMap::kExperimentalCFLAwareSizeClassesCount = kCount;
const SizeClassInfo SizeMap::kExperimentalCFLAwareSizeClasses[SizeMap::kExperimentalCFLAwareSizeClassesCount] = {
    // <bytes>, <pages>, <batch size>    <fixed>
    {        0,       0,           0},  // +Inf%
    {        8,       1,          32},  // 1.17%
    {       16,       1,          32},  // 1.17%
    {       32,       1,          32},  // 1.17%
    {       64,       1,          32},  // 1.17%
    {       72,       1,          32},  // 2.73%
    {       80,       1,          32},  // 1.56%
    {       88,       1,          32},  // 2.34%
    {       96,       1,          32},  // 2.73%
    {      104,       1,          32},  // 2.15%
    {      112,       1,          32},  // 2.73%
    {      120,       1,          32},  // 1.56%
    {      128,       1,          32},  // 1.17%
    {      144,       1,          32},  // 2.73%
    {      160,       1,          32},  // 3.52%
    {      184,       1,          32},  // 2.34%
    {      208,       1,          32},  // 4.69%
    {      240,       1,          32},  // 1.56%
    {      256,       1,          32},  // 1.17%
    {      272,       1,          32},  // 1.56%
    {      304,       1,          32},  // 4.69%
    {      336,       1,          32},  // 2.73%
    {      352,       1,          32},  // 6.64%
    {      408,       1,          32},  // 1.56%
    {      448,       1,          32},  // 2.73%
    {      512,       1,          32},  // 1.17%
    {      576,       2,          32},  // 2.15%
    {      704,       2,          32},  // 6.05%
    {      768,       2,          32},  // 6.84%
    {      896,       2,          32},  // 2.15%
    {     1024,       2,          32},  // 0.59%
    {     1152,       3,          32},  // 6.64%
    {     1280,       3,          32},  // 6.64%
    {     1536,       3,          32},  // 0.39%
    {     1792,       4,          32},  // 1.86%
    {     2048,       4,          32},  // 0.29%
    {     2304,       4,          28},  // 1.86%
    {     2688,       4,          24},  // 1.86%
    {     3200,       4,          20},  // 2.64%
    {     4096,       4,          16},  // 0.29%
    {     6144,       3,          10},  // 0.39%
    {     8192,       4,           8},  // 0.29%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#else
#if TCMALLOC_PAGE_SHIFT == 13
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 85;
static_assert(kCount <= kNumClasses);
const int SizeMap::kExperimentalCFLAwareSizeClassesCount = kCount;
const SizeClassInfo SizeMap::kExperimentalCFLAwareSizeClasses[SizeMap::kExperimentalCFLAwareSizeClassesCount] = {
    // <bytes>, <pages>, <batch size>    <fixed>
    {        0,       0,           0},  // +Inf%
    {        8,       1,          32},  // 0.59%
    {       16,       1,          32},  // 0.59%
    {       32,       1,          32},  // 0.59%
    {       64,       1,          32},  // 0.59%
    {       80,       1,          32},  // 0.98%
    {       96,       1,          32},  // 0.98%
    {      112,       1,          32},  // 0.78%
    {      128,       1,          32},  // 0.59%
    {      144,       1,          32},  // 2.15%
    {      160,       1,          32},  // 0.98%
    {      176,       1,          32},  // 1.76%
    {      192,       1,          32},  // 2.15%
    {      208,       1,          32},  // 1.56%
    {      224,       1,          32},  // 2.15%
    {      240,       1,          32},  // 0.98%
    {      256,       1,          32},  // 0.59%
    {      272,       1,          32},  // 0.98%
    {      288,       1,          32},  // 2.15%
    {      304,       1,          32},  // 4.10%
    {      320,       1,          32},  // 2.93%
    {      336,       1,          32},  // 2.15%
    {      352,       1,          32},  // 1.76%
    {      368,       1,          32},  // 1.76%
    {      384,       1,          32},  // 2.15%
    {      400,       1,          32},  // 2.93%
    {      416,       1,          32},  // 4.10%
    {      448,       1,          32},  // 2.15%
    {      480,       1,          32},  // 0.98%
    {      512,       1,          32},  // 0.59%
    {      576,       1,          32},  // 2.15%
    {      640,       1,          32},  // 6.84%
    {      704,       1,          32},  // 6.05%
    {      768,       1,          32},  // 6.84%
    {      832,       1,          32},  // 9.18%
    {      896,       1,          32},  // 2.15%
    {     1024,       1,          32},  // 0.59%
    {     1152,       2,          32},  // 1.86%
    {     1280,       2,          32},  // 6.54%
    {     1408,       2,          32},  // 5.76%
    {     1536,       2,          32},  // 6.54%
    {     1664,       2,          32},  // 8.89%
    {     1792,       2,          32},  // 1.86%
    {     1920,       2,          32},  // 6.54%
    {     2048,       2,          32},  // 0.29%
    {     2176,       2,          30},  // 7.32%
    {     2304,       2,          28},  // 1.86%
    {     2432,       3,          26},  // 1.24%
    {     2688,       2,          24},  // 1.86%
    {     2944,       2,          22},  // 10.45%
    {     3200,       2,          20},  // 2.64%
    {     4096,       1,          16},  // 0.59%
    {     4352,       2,          15},  // 20.61%
    {     4736,       2,          13},  // 13.57%
    {     5376,       2,          12},  // 1.86%
    {     6144,       3,          10},  // 0.20%
    {     8192,       1,           8},  // 0.59%
    {     9344,       3,           7},  // 24.15%
    {    10880,       4,           6},  // 0.54%
    {    12288,       3,           5},  // 0.20%
    {    13568,       2,           4},  // 17.48%
    {    16384,       2,           4},  // 0.29%
    {    19072,       3,           3},  // 22.59%
    {    20480,       3,           3},  // 16.86%
    {    24576,       3,           2},  // 0.20%
    {    28672,       4,           2},  // 12.65%
    {    32768,       4,           2},  // 0.15%
    {    40960,       5,           2},  // 0.12%
    {    49152,       6,           2},  // 0.10%
    {    57344,       7,           2},  // 0.08%
    {    65536,       8,           2},  // 0.07%
    {    73728,       9,           2},  // 0.07%
    {    81920,      10,           2},  // 0.06%
    {    90112,      11,           2},  // 0.05%
    {    98304,      12,           2},  // 0.05%
    {   106496,      13,           2},  // 0.05%
    {   114688,      14,           2},  // 0.04%
    {   131072,      16,           2},  // 0.04%
    {   139264,      17,           2},  // 0.03%
    {   155648,      19,           2},  // 0.03%
    {   172032,      21,           2},  // 0.03%
    {   188416,      23,           2},  // 0.03%
    {   204800,      25,           2},  // 0.02%
    {   237568,      29,           2},  // 0.02%
    {   262144,      32,           2},  // 0.02%
};
#elif TCMALLOC_PAGE_SHIFT == 15
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 77;
static_assert(kCount <= kNumClasses);
const int SizeMap::kExperimentalCFLAwareSizeClassesCount = kCount;
const SizeClassInfo SizeMap::kExperimentalCFLAwareSizeClasses[SizeMap::kExperimentalCFLAwareSizeClassesCount] = {
    // <bytes>, <pages>, <batch size>    <fixed>
    {        0,       0,           0},  // +Inf%
    {        8,       1,          32},  // 0.15%
    {       16,       1,          32},  // 0.15%
    {       32,       1,          32},  // 0.15%
    {       64,       1,          32},  // 0.15%
    {       80,       1,          32},  // 0.29%
    {       96,       1,          32},  // 0.24%
    {      112,       1,          32},  // 0.34%
    {      128,       1,          32},  // 0.15%
    {      144,       1,          32},  // 0.39%
    {      160,       1,          32},  // 0.54%
    {      176,       1,          32},  // 0.24%
    {      192,       1,          32},  // 0.54%
    {      208,       1,          32},  // 0.49%
    {      224,       1,          32},  // 0.34%
    {      240,       1,          32},  // 0.54%
    {      256,       1,          32},  // 0.15%
    {      272,       1,          32},  // 0.54%
    {      288,       1,          32},  // 0.83%
    {      304,       1,          32},  // 0.88%
    {      320,       1,          32},  // 0.54%
    {      336,       1,          32},  // 0.68%
    {      352,       1,          32},  // 0.24%
    {      384,       1,          32},  // 0.54%
    {      400,       1,          32},  // 1.27%
    {      416,       1,          32},  // 1.12%
    {      448,       1,          32},  // 0.34%
    {      464,       1,          32},  // 1.03%
    {      496,       1,          32},  // 0.24%
    {      512,       1,          32},  // 0.15%
    {      576,       1,          32},  // 1.71%
    {      640,       1,          32},  // 0.54%
    {      704,       1,          32},  // 1.32%
    {      768,       1,          32},  // 1.71%
    {      832,       1,          32},  // 1.12%
    {      896,       1,          32},  // 1.71%
    {      960,       1,          32},  // 0.54%
    {     1024,       1,          32},  // 0.15%
    {     1152,       1,          32},  // 1.71%
    {     1280,       1,          32},  // 2.49%
    {     1408,       1,          32},  // 1.32%
    {     1536,       1,          32},  // 1.71%
    {     1664,       1,          32},  // 3.66%
    {     1920,       1,          32},  // 0.54%
    {     2048,       1,          32},  // 0.15%
    {     2176,       1,          30},  // 0.54%
    {     2304,       1,          28},  // 1.71%
    {     2432,       1,          26},  // 3.66%
    {     2688,       1,          24},  // 1.71%
    {     2944,       1,          22},  // 1.32%
    {     3200,       1,          20},  // 2.49%
    {     3584,       1,          18},  // 1.71%
    {     4096,       1,          16},  // 0.15%
    {     4224,       1,          15},  // 9.91%
    {     4608,       1,          14},  // 1.71%
    {     5376,       1,          12},  // 1.71%
    {     6528,       1,          10},  // 0.54%
    {     7168,       1,           9},  // 12.65%
    {     8192,       1,           8},  // 0.15%
    {     9344,       2,           7},  // 0.27%
    {    10880,       1,           6},  // 0.54%
    {    13056,       2,           5},  // 0.46%
    {    16384,       1,           4},  // 0.15%
    {    18688,       2,           3},  // 14.53%
    {    21760,       2,           3},  // 0.46%
    {    24576,       1,           2},  // 25.15%
    {    32768,       1,           2},  // 0.15%
    {    43648,       4,           2},  // 0.13%
    {    49152,       3,           2},  // 0.05%
    {    65536,       2,           2},  // 0.07%
    {    76416,       3,           2},  // 22.31%
    {    98304,       3,           2},  // 0.05%
    {   131072,       4,           2},  // 0.04%
    {   163840,       5,           2},  // 0.03%
    {   196608,       6,           2},  // 0.02%
    {   229376,       7,           2},  // 0.02%
    {   262144,       8,           2},  // 0.02%
};
#elif TCMALLOC_PAGE_SHIFT == 18
static_assert(kMaxSize == 262144, "kMaxSize mismatch");
static const int kCount = 88;
static_assert(kCount <= kNumClasses);
const int SizeMap::kExperimentalCFLAwareSizeClassesCount = kCount;
const SizeClassInfo SizeMap::kExperimentalCFLAwareSizeClasses[SizeMap::kExperimentalCFLAwareSizeClassesCount] = {
    // <bytes>, <pages>, <batch size>    <fixed>
    {        0,       0,           0},  // +Inf%
    {        8,       1,          32},  // 0.02%
    {       16,       1,          32},  // 0.02%
    {       32,       1,          32},  // 0.02%
    {       64,       1,          32},  // 0.02%
    {       80,       1,          32},  // 0.04%
    {       96,       1,          32},  // 0.04%
    {      112,       1,          32},  // 0.04%
    {      128,       1,          32},  // 0.02%
    {      144,       1,          32},  // 0.04%
    {      160,       1,          32},  // 0.04%
    {      176,       1,          32},  // 0.05%
    {      192,       1,          32},  // 0.04%
    {      208,       1,          32},  // 0.04%
    {      224,       1,          32},  // 0.04%
    {      240,       1,          32},  // 0.04%
    {      256,       1,          32},  // 0.02%
    {      272,       1,          32},  // 0.10%
    {      304,       1,          32},  // 0.05%
    {      336,       1,          32},  // 0.04%
    {      368,       1,          32},  // 0.07%
    {      416,       1,          32},  // 0.04%
    {      464,       1,          32},  // 0.19%
    {      512,       1,          32},  // 0.02%
    {      576,       1,          32},  // 0.04%
    {      640,       1,          32},  // 0.16%
    {      704,       1,          32},  // 0.12%
    {      768,       1,          32},  // 0.12%
    {      832,       1,          32},  // 0.04%
    {      896,       1,          32},  // 0.21%
    {     1024,       1,          32},  // 0.02%
    {     1152,       1,          32},  // 0.26%
    {     1280,       1,          32},  // 0.41%
    {     1408,       1,          32},  // 0.12%
    {     1536,       1,          32},  // 0.41%
    {     1664,       1,          32},  // 0.36%
    {     1792,       1,          32},  // 0.21%
    {     1920,       1,          32},  // 0.41%
    {     2048,       1,          32},  // 0.02%
    {     2176,       1,          30},  // 0.41%
    {     2304,       1,          28},  // 0.70%
    {     2432,       1,          26},  // 0.75%
    {     2688,       1,          24},  // 0.56%
    {     2944,       1,          22},  // 0.07%
    {     3072,       1,          21},  // 0.41%
    {     3328,       1,          19},  // 0.99%
    {     3584,       1,          18},  // 0.21%
    {     3840,       1,          17},  // 0.41%
    {     4096,       1,          16},  // 0.02%
    {     4352,       1,          15},  // 0.41%
    {     4736,       1,          13},  // 0.65%
    {     5120,       1,          12},  // 0.41%
    {     5504,       1,          11},  // 1.34%
    {     5888,       1,          11},  // 1.19%
    {     6528,       1,          10},  // 0.41%
    {     7168,       1,           9},  // 1.58%
    {     7680,       1,           8},  // 0.41%
    {     8192,       1,           8},  // 0.02%
    {     8704,       1,           7},  // 0.41%
    {     9344,       1,           7},  // 0.21%
    {     9984,       1,           6},  // 0.99%
    {    10880,       1,           6},  // 0.41%
    {    11904,       1,           5},  // 0.12%
    {    13056,       1,           5},  // 0.41%
    {    13696,       1,           4},  // 0.75%
    {    15360,       1,           4},  // 0.41%
    {    16384,       1,           4},  // 0.02%
    {    17408,       1,           3},  // 0.41%
    {    18688,       1,           3},  // 0.21%
    {    20096,       1,           3},  // 0.36%
    {    21760,       1,           3},  // 0.41%
    {    23808,       1,           2},  // 0.12%
    {    26112,       1,           2},  // 0.41%
    {    29056,       1,           2},  // 0.26%
    {    32768,       1,           2},  // 0.02%
    {    37376,       1,           2},  // 0.21%
    {    43648,       1,           2},  // 0.12%
    {    52352,       1,           2},  // 0.16%
    {    65536,       1,           2},  // 0.02%
    {    74880,       2,           2},  // 0.03%
    {    87296,       1,           2},  // 0.12%
    {   104832,       2,           2},  // 0.03%
    {   116480,       1,           2},  // 11.15%
    {   131072,       1,           2},  // 0.02%
    {   149760,       2,           2},  // 14.32%
    {   174720,       2,           2},  // 0.03%
    {   196608,       1,           2},  // 25.02%
    {   262144,       1,           2},  // 0.02%
};
#elif TCMALLOC_PAGE_SHIFT == 12
static_assert(kMaxSize == 8192, "kMaxSize mismatch");
static const int kCount = 45;
static_assert(kCount <= kNumClasses);
const int SizeMap::kExperimentalCFLAwareSizeClassesCount = kCount;
const SizeClassInfo SizeMap::kExperimentalCFLAwareSizeClasses[SizeMap::kExperimentalCFLAwareSizeClassesCount] = {
    // <bytes>, <pages>, <batch size>    <fixed>
    {        0,       0,           0},  // +Inf%
    {        8,       1,          32},  // 1.17%
    {       16,       1,          32},  // 1.17%
    {       32,       1,          32},  // 1.17%
    {       64,       1,          32},  // 1.17%
    {       80,       1,          32},  // 1.56%
    {       96,       1,          32},  // 2.73%
    {      112,       1,          32},  // 2.73%
    {      128,       1,          32},  // 1.17%
    {      144,       1,          32},  // 2.73%
    {      160,       1,          32},  // 3.52%
    {      176,       1,          32},  // 2.34%
    {      192,       1,          32},  // 2.73%
    {      208,       1,          32},  // 4.69%
    {      224,       1,          32},  // 2.73%
    {      240,       1,          32},  // 1.56%
    {      256,       1,          32},  // 1.17%
    {      272,       1,          32},  // 1.56%
    {      288,       1,          32},  // 2.73%
    {      304,       1,          32},  // 4.69%
    {      320,       1,          32},  // 7.42%
    {      336,       1,          32},  // 2.73%
    {      352,       1,          32},  // 6.64%
    {      400,       1,          32},  // 3.52%
    {      448,       1,          32},  // 2.73%
    {      512,       1,          32},  // 1.17%
    {      576,       2,          32},  // 2.15%
    {      640,       2,          32},  // 6.84%
    {      704,       2,          32},  // 6.05%
    {      768,       2,          32},  // 6.84%
    {      896,       2,          32},  // 2.15%
    {     1024,       2,          32},  // 0.59%
    {     1152,       3,          32},  // 6.64%
    {     1280,       3,          32},  // 6.64%
    {     1536,       3,          32},  // 0.39%
    {     1792,       4,          32},  // 1.86%
    {     2048,       4,          32},  // 0.29%
    {     2304,       4,          28},  // 1.86%
    {     2688,       4,          24},  // 1.86%
    {     3200,       4,          20},  // 2.64%
    {     4096,       4,          16},  // 0.29%
    {     5376,       4,          12},  // 1.86%
    {     6144,       3,          10},  // 0.39%
    {     6784,       5,           9},  // 0.86%
    {     8192,       4,           8},  // 0.29%
};
#else
#error "Unsupported TCMALLOC_PAGE_SHIFT value!"
#endif
#endif
// clang-format on

}  // namespace tcmalloc_internal
}  // namespace tcmalloc
GOOGLE_MALLOC_SECTION_END
